#ifndef BOOT0_HEADER_H 
#define BOOT0_HEADER_H 

#include "boot0.h"
#include <stdint.h>
#include "dram-param.h"
struct boot0_public_header {
    uint32_t jump_instruction;         // instruction skipping over the header 
    uint8_t  magic[BOOT0_MAGIC_SIZE];  // the magic number "eGON.BT0"
    uint32_t checksum;                 // checksum, generated by script 
    uint32_t length;                   // required(?)
    uint32_t public_header_size;       // size of the public header (this struct), not strictly required 
};

struct boot0_private_header {
    uint32_t private_header_size;        // size of the private header (this struct), not strictly required 
    struct ddr3_param_t dram_parameter;  // used to initialize DRAM 
};

struct boot0_header {
    struct boot0_public_header  public_header; 
    struct boot0_private_header private_header; 
};

extern const struct boot0_header BT0_header;

// _Static_assert(sizeof(BT0_header) % 8 == 0, "size of the boot0 header must be a multiple of 8 due to alignment issues");
#endif // ! BOOT0_HEADER_H 
